/* gramática utilizada no trabalho 2 - 2023 */
/* a gramática abaixo pode ser submetida ao software sugerido para que vocês possam entender quais expressões são aceitas na linguagem */

<character>     ::= <letter> | <digit> | <symbol>
<letter>        ::= [a-z] | [A-Z] 
<digit>         ::= [0-9]
<intnum>        ::= <digit>+
<number>        ::= <intnum> | <intnum> "." <intnum>
<bool>          ::= "true" | "false"
<other_symb>    ::=  "_" | "!" | "?" | "#" 
<reserv_symb>   ::=   "(" | ")" | "+" | "-" | "*" | "~" | "%" |
                      "<" | ">" | "<=" | ">=" | "==" | "!=" 
<symbol>        ::=  <reserv_symb> | <other_symb>
<reserv_word>   ::=  "cons" | "head" | "tail" | 
                     "if" | "let" | "letrec" | 
                     "lambda" | "call" | "true" | "false"
                     <bool>
                      
<reservedW>      ::=  <reserv_symb> | <reserv_word>

/* id a ser modificado - começa com letra, seguida de letras e dígitos e (não é uma palavra reservada) */
/* já realizado no primeiro trabalho */

<id> ::= <palavrasemif> | <palavrasemlambda> | <palavrasemletrecnemlet> | <palavrasemhead> | <palavrasemtail> | <palavrasemcons> | <palavrasemcall> | "i" | "l" | "h" | "t" | "c" | "f" | <restopalavras> | <palavrassemtrue> | <palavrassemfalse>
<characterorDigit> ::= <character> | <digit>

<characternaoa> ::= [A-Z] | [b-z] | <digit>
<characternaob> ::= [A-Z] | "a" | [c-z] | <digit>
<characternaoc> ::= [A-Z] | [a-b] | [d-z] | <digit>
<characternaod> ::= [A-Z] | [a-c] | [e-z] | <digit>
<characternaoe> ::= [A-Z] | [a-d] | [f-z] | <digit>
<characternaof> ::= [A-Z] | [a-e] | [g-z] | <digit>
<characternaoh> ::= [A-Z] | [a-g] | [i-z] | <digit>
<characternaoi> ::= [A-Z] | [a-h] | [j-z] | <digit>
<characternaol> ::= [A-Z] | [a-k] | [m-z] | <digit>
<characternaom> ::= [A-Z] | [a-l] | [n-z] | <digit>
<characternaon> ::= [A-Z] | [a-m] | [o-z] | <digit>
<characternaoo> ::= [A-Z] | [a-n] | [p-z] | <digit>
<characternaor> ::= [A-Z] | [a-q] | [s-z] | <digit>
<characternaos> ::= [A-Z] | [a-r] | [t-z] | <digit>
<characternaot> ::= [A-Z] | [a-s] | [u-z] | <digit>
<characternaou> ::= [A-Z] | [a-t] | [v-z] | <digit>

<characternaoanaoe> ::= [A-Z] | [b-d] | [f-z] | <digit>
<characternaoanaoo> ::= [A-Z] | [b-n] | [p-z] | <digit>
<characternaoanaor> ::= [A-Z] | [b-q] | [s-z] | <digit>

<palavrasemif> ::= "if" <characterorDigit>+ | "i" ( E | (<characternaof> (<characterorDigit>)*))
<palavrasemletrecnemlet> ::= "letrec" <characterorDigit>+ | "l" ( E | (<characternaoanaoe> (<characterorDigit>)*)) | "le" ( E | (<characternaot> (<characterorDigit>)*)) | "let" <characternaor> (<characterorDigit>)* | "letr" ( E | (<characternaoe> (<characterorDigit>)*)) | "letre" ( E | (<characternaoc> (<characterorDigit>)*))
<palavrasemlambda> ::= "lambda" <characterorDigit>+ | "l" ( E | (<characternaoanaoe> (<characterorDigit>)*)) | "la" ( E | (<characternaom> (<characterorDigit>)*)) | "lam" ( E | (<characternaob> (<characterorDigit>)*)) | "lamb" ( E | (<characternaod> (<characterorDigit>)*)) | "lambd" ( E | (<characternaoa> (<characterorDigit>)*))
<palavrasemhead> ::= "head" <characterorDigit>+ | "h" ( E | (<characternaoe> (<characterorDigit>)*)) | "he" ( E | (<characternaoa> (<characterorDigit>)*)) | "hea" ( E | ( <characternaod> (<characterorDigit>)*))
<palavrasemtail> ::= "tail" <characterorDigit>+ | "t" ( E | (<characternaoanaor> (<characterorDigit>)*)) | "ta" ( E | (<characternaoi> (<characterorDigit>)*)) | "tai" ( E | (<characternaol> (<characterorDigit>)*))
<palavrasemcons> ::= "cons" <characterorDigit>+ | "c" ( E | (<characternaoanaoo> (<characterorDigit>)*)) | "co" ( E | (<characternaon> (<characterorDigit>)*)) | "con" ( E | (<characternaos> (<characterorDigit>)*)) 
<palavrasemcall> ::=  "call" <characterorDigit>+ | "c" ( E | (<characternaoanaoo> (<characterorDigit>)*)) | "ca" ( E | (<characternaol> (<characterorDigit>)*)) | "cal" ( E | (<characternaol> (<characterorDigit>)*))
<palavrassemtrue> ::= "true" <characterorDigit>+ | "t" ( E | (<characternaoanaor> (<characterorDigit>)*)) | "tr" ( E | (<characternaou> (<characterorDigit>)*)) | "tru" ( E | (<characternaoe> (<characterorDigit>)*))
<palavrassemfalse> ::= "false" <characterorDigit>+ | "f" ( E | (<characternaoa> (<characterorDigit>)*)) | "fa" ( E | (<characternaol> (<characterorDigit>)*)) | "fal" ( E | (<characternaos> (<characterorDigit>)*)) | "fals" ( E | (<characternaoe> (<characterorDigit>)*))
<restopalavras> ::= ([A-Z] | [a-b] | [d-e] | [g-g] | [j-k] | [m-s] | [u-z]) (<characterorDigit>)*

/* -- Operadores Relacionais -- */
<eq_op>  ::= "== " | "!= "
<cmp_op> ::= "> " | ">= " | "< " | "<= "   
<op_rel> ::= <eq_op> | <cmp_op>

/* -- Expressões Relacionais -- */
<rel_expr> ::= "(" <op_rel>  <arith_expr> " " <arith_expr> ")" | "(" <op_rel>  <arith_expr> " " <call> ")" | "(" <op_rel>  <arith_expr> " " <call> ")"


/* -- Operadores Aritméticos -- */
<op_arith_bin> ::= "+ " | "- " | "* " | "% " 
<op_arith_un>  ::= "~ "

/* -- Expressões Aritméticas -- */
<arith_expr> ::= "(" <exprA_bin> ")" | "(" <exprA_un> ")" | <number>
<exprA_bin>  ::= <op_arith_bin> <code> " " <code>
<exprA_un>   ::= <op_arith_un> <code> 


/* -- Operadores Listas -- */
<op_list>      ::= "head " | "tail "

/* -- Expressões sobre listas -- */
<list_expr>  ::= <cons> | "(" <exprL>  ")"
<cons>       ::= "(cons " <code> " " <code> ")"
<exprL>      ::= <op_list>  <code> 


/* -- Expressões Lambda (definição e aplicação de funções) -- */
<lamb_expr> ::=  <lambda> | <call> 
<lambda>    ::= "(lambda " <param> " "  <code> ")"
<param>     ::= <id>
<call>      ::= "(call " <lambda> " " <code> ")"

/* -- expressões if -- */
<if>    ::= "(if " <cond>  " " <pos>  " " <neg> ")"
<cond>  ::= <rel_expr> | <bool>
<pos>   ::= <code>
<neg>   ::= <code>

/* -- expressões let  -- */         
<let_expr>  ::=  <let> | <letrec> 
<let>       ::= "(let " <id> " "  <def>  " " <body> ")"
<letrec>    ::= "(letrec " <id> " "  <lambda>  " " <body> ")"
<def>       ::= <code>
<body>      ::= <code>


/* -- Código do programa -- */
<code>  ::=  <expr> | <number> | <id>

<expr>  ::=  <arith_expr> | <list_expr> | <lamb_expr> | <if> | <let_expr> 

