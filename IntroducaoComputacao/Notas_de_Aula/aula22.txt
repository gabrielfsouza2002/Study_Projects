Resumo da Aula 22 (08/06/2022)
------------------------------

Exercícios usando matrizes (arrays bidimensionais)

======================
Problema 42: Seja n um inteiro positivo e A uma
matriz inteira de dimensão  n x n.
Dizemos que A é uma matriz de permutação se cada uma
de suas linhas e cada uma de suas colunas contém
exatamente n-1 elementos nulos e um único elemento
igual a 1.


Solução 1
---------

    int  i, j, cont0, cont1, stop ;
    int  M[MAX][MAX] ;

    printf("Digite n: ");
    scanf("%d", &n) ;
    
    printf("Digite a matriz A, n x n: ");   
    le_matriz(n, n, M) ;   /* veja aula 21 */

    stop = 0 ;

    /* verificar cada uma das linhas */
    for(i=0; i<n && !stop; i++) {
      cont0 = 0;
      cont1 = 0;
      for(j=0; j<n && !stop; j++) {
        if (M[i][j]==0) cont0++;
	else if (M[i][j]==1) cont1++;
	else stop = 1 ;
      }
      if (cont0 != n-1 || cont1 != 1) stop = 1;
    }

    /* verificar cada uma das colunas */
    for(j=0; j<n && !stop; j++) {
      cont0 = 0;
      cont1 = 0;
      for(i=0; i<n && !stop; i++) {
        if (M[i][j]==0) cont0++;
	else if (M[i][j]==1) cont1++;
	else stop = 1 ;
      }
      if (cont0 != n-1 || cont1 != 1) stop = 1;
    }

    if(!stop) {
      printf("A matriz é de permutação\n");
    }
    else {
      printf("A matriz não é de permutação\n");
    }
    return 0 ;


Comentário: a solução acima é super bruta-força,
   na qual verificamos literalmente cada uma das
   linhas e depois cada uma das colunas.

   A flag "stop" é usada para parar as iterações
   dos laços assim que descobrimos que não tem
   chance de a matriz ser de permutação.
   Em todo caso, pode haver necessidade de se
   percorrer a matriz duas vezes.
   
   Então fica a pergunta: será que conseguimos
   resolver esse problema percorrendo a matriz
   apenas uma única vez ?


Solução 2
---------

    int  i, j, stop ;
    int  cont0L, cont1L, cont0C, cont1C ;
    int  M[MAX][MAX] ;

    printf("Digite n: ");
    scanf("%d", &n) ;
    
    printf("Digite a matriz A, n x n: ");   
    le_matriz(n, n, M) ;   /* veja aula 21 */

    stop = 0 ;

    /* verificar cada uma das linhas e colunas */
    for(i=0; i<n && !stop; i++) {

      cont0L = 0;
      cont1L = 0;
      cont0C = 0;
      cont1C = 0;
      
      for(j=0; j<n && !stop; j++) {
      
        /* verificando elementos da linha i */
        if (M[i][j]==0) cont0L++;
	else if (M[i][j]==1) cont1L++;
	else stop = 1 ;

        /* verificando elementos da coluna j */
        if (M[j][i]==0) cont0C++;
	else if (M[j][i]==1) cont1C++;
	else stop = 1 ;
      }
      
      if (cont0L!=n-1 || cont1L!=1 || cont0C!=n-1 || cont1C!=1)
        stop = 1;
    }

    if(!stop) {
      printf("A matriz é de permutação\n");
    }
    else {
      printf("A matriz não é de permutação\n");
    }
    return 0 ;


Comentário sobre a solução 2
---------------------
  Esta solução considera o fato de a matriz ser quadrada e
  então aproveita o laço duplo, que é para percorrer
  a matriz linha a linha, para também percorrer a matriz coluna
  a coluna. No caso, o bloco if/else repete-se, com
  o elemento-alvo sendo M[i][j] no primeiro bloco e  
  M[j][i] no segundo bloco.

  Comparando com a solução anterior, além da duplicação do
  bloco if/else, foi necessário o uso de duas variáveis
  adicionais (cont0C e cont1C).
  Por outro lado, o percorrimento sobre a matriz ocorre
  uma vez.


Solução 3: outra solução, usando um vetor contador e um vetor soma
---------

    int  i, j, stop ;
    int  contL, somaL, contC[MAX], somaC[MAX] ;
    int  M[MAX][MAX] ;

    printf("Digite n: ");
    scanf("%d", &n) ;
    
    printf("Digite a matriz A, n x n: ");   
    le_matriz(n, n, M) ;   /* veja aula 21 */

    stop = 0 ;
    for(i=0; i<n; i++) {
      contC[i] = 0;
      somaC[i] = 0;
    }

    /* verificar cada uma das linhas e guardar informações sobre colunas */
    for(i=0; i<n && !stop; i++) {
      contL = 0;
      somaL = 0;
      for(j=0; j<n; j++) {
        if (M[i][j]==0) {
	  contL++;
	  contC[j] = contC[j]+1;
	}
	else {
	  somaL = somaL + M[i][j] ;
	  somaC[j] = somaC[j] + M[i][j] ;
	}
      }
      if (contL!=n-1 || soma!=1) stop = 1 ;
    }

    for(i=0; !stop && i<n; i++) {
      if(contC[i] != n-1 || somaC[i] != 1) stop = 1 ;
    }
    
    if(!stop) {
      printf("A matriz é de permutação\n");
    }
    else {
      printf("A matriz não é de permutação\n");
    }
    return 0 ;


Comentário solução 3
----------
   A solução 3 conta a quantidade de zeros e soma os
   valores diferentes de zero. Assim, para cada linha
   e cada coluna, basta ver se a respectiva contagem
   resultou em n-1 zeros e soma igual a 1.

   Comparada à solução anterior, dentro do laço há
   apenas um if/else.
   Por outro lado, há um laço inicial para inicializar
   os vetores e um laço final para verificar a contagem
   e soma em cada uma das colunas, além do fato de se
   utilizar mais memória por conta dos vetores.


Comentário Problema 43
----------------------
   As 3 soluções acima mostram que um mesmo problema
   pode ser resolvido de diferentes formas. Alguns são
   mais bruta-força, outros tentam reduzir, por exemplo
   o número de iterações.

   De forma geral, soluções que reduzem o custo
   computacional (de processamento) requerem o uso de
   variáveis auxiliares, o que implica um maior custo
   de espaço (uso de memória).

   Nesta disciplina essas noções de custo, de soluções
   mais ou menos eficientes, é abordado apenas informalmente.
   Um estudo mais formal acontecerá em outras
   disciplinas.


======================
Problema 44: Seja um inteiro positivo n e uma matriz inteira
A de dimensão n x n, dizemos que A é um quadrado mágico se
a soma de cada uma de suas linhas, a soma de cada uma de suas
colunas e as somas das diagonais principal e secundária
forem todas iguais. Dado n e uma matriz A de dimensão n x n,
verifique se A é um quadrado mágico.


   
   
